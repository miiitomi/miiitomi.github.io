[{"content":"せっかくこんなブログ作ってみたりしたので、2021年の振り返りでもしてみようかと思います。\nマーケットデザインの共同研究・社会実装プロジェクトの開始 今年一年何をやっていたかと言うと、色々やっていたのですが大きなものだと主にこれをやってました。\n ＼プレスリリース／\nAI Lab、GovTech開発センター、東京大学マーケットデザインセンター (@UTokyoMD) にて、共同研究を開始いたします。\n官公庁・自治体のDXを #マーケットデザイン で推進。 経済学者の小島武仁氏、鎌田雄一郎氏と共に、社会課題の解決を目指します。#UTMDhttps://t.co/I8aFFVcfeu\n\u0026mdash; サイバーエージェント　広報＆IR担当 (@CyberAgent_PR) March 16, 2021   具体的には、Advent Calendar で自分が書かせていただいた「保育所利用調整マッチングの実証実験」に取り組んでいます。\n 🎄#CyberAgentAdventCalendar2021🎄\n9日目は #AILab が東京大学マーケットデザインセンター（UTMD）との共同研究の1つとして取り組んでいる「保育所マッチングプロジェクト」についてご紹介しています。ぜひご覧ください。https://t.co/EhfDpZ7rO6\n\u0026mdash; CyberAgentDevelopers (@ca_developers) December 9, 2021   自分はこのプロジェクトで、経済学・CS分野で研究されているマッチングアルゴリズムを現実の問題に即した形で実装し、どういったアルゴリズムを使うべきかと言う議論と新アルゴリズムの開発を行なっています。\n学生時代自分は研究でもプライベートでもプログラミングをすることはほとんどなかったため、 実装に手間取ったりすることも多々あり自分の力不足を感じることも多いのですが、 大学で学んできたマーケットデザインを実際に活用していくための社会実装プロジェクトということでとてもやりがいを持って取り組めています。\nまたこれ以外にもマッチング・マーケットデザイン関連の研究や社内での応用・社会実装プロジェクトをいくつか進めています。\n広報・登壇 社内外向けの広報活動・登壇も色々させていただいた1年でした。\n前述のプロジェクトでご一緒させていただいている鎌田先生と会社のオウンドメディアのFeaturesで対談させてもらったり、\n ―マーケットデザインと、その有用性を知ってもらいたい\n近年注目が高まる、新しい研究領域「マーケットデザイン」\nより良い社会の設計、共同研究での利点、両者の見据える未来についてなど、世界で活躍する経済学者 鎌田准教授と、AI Lab研究員冨田が対談を実施しました。https://t.co/c1JCH1Wjkt\n\u0026mdash; サイバーエージェント　広報＆IR担当 (@CyberAgent_PR) September 21, 2021   また、EconFiesta2や日経学会秋季大会の企画セッション、企業研究のカンファレンスCCSEなどでもお話しさせていただきました。\n A会場では12:00から、#経済学 に関する個人セッションがスタートします！\nメルカリから柳沼慎哉氏、サイバーエージェントから冨田 燿志氏が登壇します😀\n▼タイムテーブルhttps://t.co/g30pR8GSef\n#CCSE2021 pic.twitter.com/TAzgnVcFvw\n\u0026mdash; CCSE2021_企業による合同研究カンファレンス (@ccse_comitee) December 17, 2021   CA AWARDS そんなこんなしていたら、9月の全社表彰では20新卒入社対象のBest Rookie Awardとして表彰していただいちゃいました。\n    じゃーん✌️ pic.twitter.com/b8zhxbB23W\n\u0026mdash; みーとみ (@miiitomi) December 22, 2021   まさか自分が表彰していただけるなんて全く思ってもいなかったので驚いたのですが、気持ちとしてはこのツイートに書いた通りで、\n 自分が新人賞ノミネートしていただいたこと自体も嬉しいんだけど、経済学・マーケットデザインの取り組みで全社表彰にノミネートしてもらえるくらい自分たちのプロジェクトが評価されてるんだってことが正直ちょっと驚いたし嬉しい\n\u0026mdash; みーとみ (@miiitomi) October 6, 2021   経済学・マーケットデザインの研究・実装に取り組ませてもらえ、しかもその取り組みで評価してもらえるなんて、本当に恵まれた環境にいさせてもらっているなと思います。\nなんかこう書くと今年は色々頑張って取り組んできて、充実した1年を過ごせてたような気がしてきました(？) 2021年はマーケットデザインの社内外での活用・社会実装を進めるための準備の年だったと言えるでしょうか。 そう言えるようにこれから成果を出していきたいです。\n仕事以外 仕事以外の面ではそんなに変わりのない一年だったような気もしますが、 今年は昨年よりはサッカーを現地に見に行って横浜F・マリノスの応援をしたり、\n逆転勝ち！ pic.twitter.com/Mq4p4Kayik\n\u0026mdash; みーとみ (@miiitomi) October 16, 2021  狩りをしたり、\nこれからしばらくの間の自由時間が生け贄に捧げられた pic.twitter.com/Wn1ZXesSKj\n\u0026mdash; みーとみ (@miiitomi) March 27, 2021  してました。\nあと学生の頃からの友人とほぼ週1でやってる勉強会は、\n 計算理論（1月〜） アルゴリズムとデータ構造（6月〜） コンピュータアーキテクチャ（10月〜, 12月で中断）  と続けてきました。 社会人になってもこういう勉強会を一緒にしてくれる友人の存在、めちゃくちゃありがたい。\nただ、年始にこう言ってたのは、\n今年は小説・漫画・映画問わず昨年より多くの物語を摂取して日々現実逃避を楽しんでいきたい\n\u0026mdash; みーとみ (@miiitomi) December 31, 2020  漫画は（シリアスTSFとか）多少読んだけど、小説・映画はあまり沢山読んだり見たりできなかった気がする。 そのあたりは2022年の課題としたい(？)\n2022年にやりたいこと 2022年の目標・やりたいことを思いつくままに書き殴っていくコーナーです。 仕事面は会社で目標設定するので、それ以外のプライベート面で。\n 小説をたくさん読む。  2020年にやってたこれができるくらい。こんなのでどうだ(ネタ切れしたらごめんなさい) #いいねされた数だけ今年読んで良かった小説を紹介する\n\u0026mdash; みーとみ (@miiitomi) December 25, 2020     読むだけじゃなくショートショート1つくらい自分でも書く。 映画もたくさん映画館に観に行く。 面倒だと先延ばしにし続けてないでいい加減そろそろ引っ越す。 部屋の片付け・掃除など家事を滞らせないようにする。 横浜F・マリノスの試合をもっと見に行く。 スノボに複数回行く。 ダイビングライセンス(OW)をとる。 Mezameeを使ってまともな時間に就寝・起床する生活を一年間維持する。メザミーで目覚め率100%のまま20回目覚めた(1回解除しそびれたと思ったらそもそも設定してなかったことあったけど) pic.twitter.com/6gmlOvLwkM\n\u0026mdash; みーとみ (@miiitomi) December 17, 2021   コーヒーを自分で淹れる習慣を作る。 香水にチャレンジする。 資産運用・投資を始める。 LINE・Slack・メールなどすぐに返せる人になる。 緑のままずっと低迷してるAtCoderをもうちょっと本腰入れてやって水色になる。 GitHubの草を一年間生やし続ける。 ずっと受けようかなーどうしようかなーと言い続けてる基本情報技術者試験を受ける。 このブログの更新を滞らせないように何かしら投稿し続ける。 全身脱毛をする。 一年間楽しく過ごす。  これくらいでいいか。\n興味あるもの、自分もこれやってみたいと思ってた！ってものある人いたら良かったら声かけてください！\n2022年もよろしくお願いします！！\n","date":"2022-01-01T16:50:04+09:00","image":"https://miiitomi.github.io/images/20220101/fig2.jpeg","permalink":"https://miiitomi.github.io/p/20220101/","title":"2021年の振り返りと2022年にやりたいこと"},{"content":"「シリアスTSF」とは 「シリアスTSF」というジャンルをご存知だろうか。\nいやご存知だろうかと言ってみたが、最近僕が勝手にそう呼び始めただけなので、そういう言葉があるのかどうか僕も知らないのだけど。\n僕なりに定義してみると、シリアスTSFとは「ギャグ要素やエロ要素ではなく、TSに伴う登場人物の内面の葛藤や周りの人間関係の変化といったシリアス要素に物語の重きを置いた、ヒューマンドラマとしてのTSF（Trans-Sexual Fiction/性転換もの）」である。\nギャグでもエロでもないシリアスめなTSFが好きって話したことありましたっけ？\n\u0026mdash; みーとみ (@miiitomi) October 24, 2021  現実にはあり得ない状況における少年・少女たちの戸惑い、葛藤が魅力のこのジャンルの作品を、 これから1つずつ僕が飽きるまで紹介していきたいと思う。\n『オレが私になるまで』 1回目の今回は、シリアスTSFの王道作品である(と僕が勝手に思っている)この作品だ。\n  オレが私になるまで 4 (MFC)    『オレが私になるまで』（佐藤はつき作）、ComicWalkerにて連載しており、単行本は2021年12月現在でMFコミックスから4巻が刊行されている。\nあらすじ やんちゃな小2男子の藤宮明(あきら)は、クラスの女の子に対ししょっちゅういたずらを働き、特に幼馴染の奈々に対してはスカートめくりの対象にするなどしていた。 ある夜、熱を出して一晩寝込むと、翌朝には髪が伸び女の子になっている。 病院での診断は「突発性性転換症候群」。 ある日突然性別が変わってしまう病気で、原因は不明、治療法もなく、女子として生きていかなければならなくなった。\n男子に戻れないという事実を受け入れられず、女の子らしくすることを拒否し、これまで通りに元の学校に行こうとする明。 しかし周りの男子には受け入れられず服を脱がされるといったいじめを受け、一方かつて酷いことをし続けた女子たちには助けを求めることもできない。 さらにクラスメイトの保護者にはこの病気が感染性のものなのではないかと忌避され（実際には他の子にうつることはない）、元の学校には馴染めないまま、明は離れた祖母の家から別の小学校に女の子として通うことになった。\n転校先の学校でも初めは女の子として上手く振る舞うことができない明だったが、そこで優しく友人として接してくれる渡井瑠海(るみ)に出会って……。\n CAUTION!!\n以下未読者の楽しみを奪わないように注意してこの作品の魅力を述べていくつもりですが、作品を読む前にネタバレや他者の感想を見たくない方は以下注意して、自己責任で読んでください！\n 瑠海と奈々 この物語で明にとって最重要人物になると言えるのが、転校先で出会い親友となる渡井瑠海だ。 転校先で男子が苦手になり、だが女子としても上手く振る舞えず女子に混ざることに恐怖心を抱く明を、瑠海は女子として優しく普通に接し、やがて明も心を開いて唯一無二の親友と呼べる存在になっていく。 そうしてやがて他の女子とも打ち解けていくのだが、ここで思い出すのが転校前の学校でひどいことをしてきたクラスメイトの女子たち、とりわけ幼馴染の奈々だ。\n  『オレが私になるまで』1巻第7話より    自分が女子として周りに受け入れられていくごとに奈々たちの視線を思い出すとともに、 元男子で女子をいじめてきた自分が女子として受け入れられてしまうことへの申し訳さと、 いつか元男子であったことが分かって気持ち悪がられるのではないかという恐怖心に明は苛まれることになる……。\nこの明と瑠海を中心とした周りの人間関係と、前の学校の奈々らとの関係性の中に生まれる、TSF独特の要素が絡んだヒューマンドラマがこの作品の魅力の一つだ。 瑠海との関係性がこの後どのように変化していくかと、転校後関わることはないが明の心の中に深く潜んでいる奈々との関係性がどのように精算されるのか、今後の展開のキーの一つになるだろう。\n女の子としての自分の受け入れ 前項の話が人間関係から生まれる外向きのヒューマンドラマとしたら、 「明が女の子としての自分を受け入れる過程での葛藤」は明の内面の話になるだろうか（もちろんその二つは深く関連しあっているので簡単に外向き・内面と二項的に対置できるものではないが）。\n最初、明は2度と男に戻れないという事実を受け入れられず、女の子らしくすることを一切拒否しようとする。 だが瑠海を中心にクラスで女子として受け入れられていくとともに、 明も少しずつ自ら女の子らしい格好をしようという意図が芽生えてくる。\nしかし、明が男の子だった頃を当然知っており、当初女の子らしい格好をすることを全力で拒否していた明を見ている母親は、 明が女の子らしい格好をしていることを友達付き合いで仕方なく嫌々やっているものだと思い、明に無理しなくていいと伝えようとする。\n  『オレが私になるまで』1巻第10話より    これだけなら転換後の性別を葛藤しながらも徐々に受け入れつつある子と、 子のために元の性別のまま生きていけるようにと願う親とのすれ違いと、 それを乗り越えようとする本人というシリアスTSFにありがちな（というほどシリアスTSF作品は多くないが、少なくともこの設定において素直な）展開なのだが、 ただ母親に伝えづらいというだけでなく、明本人の中にもそれを伝えづらい理由があり……。\n  『オレが私になるまで』4巻第41話より    可愛い格好をしたいけど、元の性別としての自分もまだあって、 生まれた時から自分を一番身近で見てきた母親にそれを伝えたら、それこそ本当に自分が変わってしまうんじゃないかという恐怖感。\nもちろん僕自身がこれと全く同じような経験をしたことはないのだが、 でもそれを一番身近な人に口に出してしまうことで何かが決定的に変わってしまうような怖さは、自分にもわかるような気がする。 そういう微妙な心境をうまく表している良いシーンだと思った。\nまとめ ここで紹介しなかったが物語上重要な役割を果たしている要素・登場人物はまだまだ沢山ある。 TSFと言われるとちょっとマニアックなジャンルに思われて手を伸ばしづらく感じている人もいるかもしれないが、人間の内面の葛藤と人間関係を描くヒューマンドラマが好きな人なら楽しめるシリアスTSF作品はあると思う。 その中でも王道的な(と僕が思う)この作品を、もし興味を持った方がいれば手に取ってみてもらえたらとても嬉しい。\n 12月22日発売の「オレが私になるまで」4巻の書店特典一覧です。\n12月22日！！12月22日！！！12月22日です！！！！\nよろしくお願いします！！！！#オレが私になるまで pic.twitter.com/Kl01mWH7Yh\n\u0026mdash; 佐藤はつき@4巻12月22日発売 (@hatukisu) December 20, 2021   ","date":"2021-12-30T11:09:50+09:00","image":"https://miiitomi.github.io/images/oregawatashininarumade/fig4.jpg","permalink":"https://miiitomi.github.io/p/oregawatashininarumade/","title":"『オレが私になるまで』"},{"content":"はじめに 誰しも普通に生きていると一度くらいScarf\u0026rsquo;s lemmaを実装する場面に遭遇すると思いますが、意外と日本語の情報が出てこなくて困ったことのある人もいるかもしれません。 Scarf’s lemma完全理解して実装完了したらqiitaかzennかにでも誰得記事書いてやろうかな\n\u0026mdash; みーとみ (@miiitomi) November 19, 2021  というツイートを前にしましたが、せっかくブログ作ったのでここに勉強記録としてまとめてみようと思います。 お気持ち整理みたいな感じなので証明はちゃんとしないし、数学的・ゲーム理論的に厳密でない書き方してるとこも多々あるかも。\nScarf\u0026rsquo;s lemma とは Scarf\u0026rsquo;s lemmaとは Scarf (1967) で示されたコアを求めるための補題です。 応用としては、例えばマッチング理論の文脈で Nguyen and Vohra (2018) で安定マッチングを求めるために使用されています。\n命題 $A, C$ は $n\\times m$ $(n \u0026lt; m)$ の行列で $$ \\begin{align*} A \u0026amp;= \\begin{bmatrix} 1 \u0026amp; \\dots \u0026amp; 0 \u0026amp; a_{1,n+1} \u0026amp; \\dots \u0026amp; a_{1,m} \\cr \\vdots \u0026amp;\\ddots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \\cr 0 \u0026amp; \\dots \u0026amp; 1 \u0026amp; a_{n,n+1} \u0026amp; \\dots \u0026amp; a_{n,m} \\end{bmatrix},\\cr C \u0026amp;= \\begin{bmatrix} c_{1,1} \u0026amp; \\dots \u0026amp; c_{n,1} \u0026amp; c_{1,n+1} \u0026amp; \\dots \u0026amp; c_{1,m} \\cr \\vdots \u0026amp;\\ddots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \u0026amp; \\vdots \\cr c_{n,1} \u0026amp; \\dots \u0026amp; c_{n,n} \u0026amp; c_{n,n+1} \u0026amp; \\dots \u0026amp; c_{n,m} \\end{bmatrix} \\end{align*} $$ の形のもので、$C$ は以下を満たすとします（これを標準形（standard form）と呼ぶことにします）：\n 各行 $i$ について、同じ数は含まれない（$C_{ij}\\ne C_{ij'}$ $\\forall j \\ne j'$）。 各行 $i$ について対角成分はその行のうち最も小さい（$c_{ii} \u0026lt; \\min_{j \\ne i}c_{ij}$）。 各行 $i$ の最初の $n$ 要素のうちの非対角成分は、後ろの $m-n$ の全ての要素より大きい（$\\min_{j:1\\le j \\le n, j\\ne i} c_{ij} \u0026gt; \\max_{k:n+1\\le k \\le m}c_{ik}$）。  また、非負ベクトル $b \\in \\mathbb{R}^n$ に対し、集合 $\\lbrace x \\in \\mathbb{R}^m_+ \\mid Ax = b \\rbrace$ は有界であるとします。\nこのとき、$Ax = b$ の基底解 $x \\in \\mathbb{R}_+^m$ であって、以下を満たすものが存在します：\n 基底に含まれる列の集合を $a$ とし、各行 $i$ に対し $u_i = \\min_{j\\in a}c_{ij}$ とする。 任意の列 $k$ に対し、ある行 $i$ が存在して、$u_i \\ge C_{ik}$ が成り立つ。  命題のお気持ち $A, C$ の各行はプレイヤー、各列はそのプレイヤーから構成されるグループを表し、\n $A_{ij}$ はプレイヤー $i$ がグループ $j$ に属すかどうか（属さないなら $0$, 属すなら所属量を表す分量？（典型的には常に $1$））  対角成分は自分1人からなるグループなので $A_{ii} = 1$.   $x$ は ($0, 1$ なら)そのグループのうちどれが実際に構成されるか（$0,1$以外ならどれくらいの強さで構成されるか）. $A_{i\\cdot}x = b_{i}$ は $i$ が参加できるグループ数の制約. $C_{ij}$ はプレイヤー $i$ がグループ $j$ から得られる利得.  というイメージ。 $u_i = \\min_{j\\in a}C_{ij}$ は今のグループの形成の仕方 $x$ から $i$ が得られている利得で、 「任意の列 $k$ に対し、ある行 $i$ が存在して、$u_i \\ge C_{ik}$ 」というのは「グループ $k$ を構成しようとしても、あるプレイヤー $i$ がいて今の利得の方が少なくとも同等以上に良いので、グループ $k$ はブロックできませんよ」という感じ。 つまりこの命題は、標準形のもとではブロックするグループ $k$ が生じない良い感じのグループの形成の仕方 $x$ が作れますよ、と言ってる。\n基数的基底と序数的基底 この $x$ を構成するアルゴリズムを考えるのですが、その前にまず基数的基底(cardinal basis)と序数的基底（ordinal basis）を導入します。\n $A$ の基数的基底解 $x$ とは $Ax = b$ の解で、$m$ 個の変数のうち $n$ 個を基底変数、$m-n$ 個を非基底変数とし、非基底変数については $x_j = 0$ となっているようなもの。（この基数的基底変数の添字の集合を $a$ と書く）  線形計画とかで出てくる普通の基底解。一方、序数的基底は、\n $C$ の序数的基底解 $x$ とは、$n$ 個の基底変数の添字集合を $c = \\lbrace j_1, \\dots, j_n\\rbrace$ としたときに、各行 $i$ について $u_i = \\min_{j \\in c}{C_{ij}}$ とおくと、任意の列 $k$ に対しある行 $i$ が存在して $u_i \\ge c_{ik}$ となるもの。  $A$ の基数的基底解であり、かつ $C$の序数的基底解であるような $x$ を、以下の基数的ピボットと序数的ピボットを使って求めることが以下の目標になります。\n基数的ピボット 基数的基底 $a = \\lbrace j_1, j_2, \\dots, j_n\\rbrace$ があり、$a$ に含まれない別の基底 $j^*$ をとります。 このとき（問題が非退化なら）ある $j' \\in a$ が一意に存在して、$ \\lbrace j^* \\rbrace \\cup a \\setminus \\lbrace j'\\rbrace$ も基底変数になる（シンプレックス法とかの普通のピボット）。\n序数的ピボット 序数的基底 $c = \\lbrace j_1, \\dots, j_n \\rbrace$ があり、そのうち任意の1つをとり（$j_1$とする）、残りの $c\\setminus \\lbrace j_1\\rbrace$ は全てが $n$ 以下というわけではないとします。 $C$ の各 $i$ 行に対し $c\\setminus\\lbrace i_1 \\rbrace$ 内で最小にする列（$\\min_{j \\in c\\setminus\\lbrace i_1 \\rbrace}C_{ij}$） を求めると、ある列 $j'$ について $j'$ で最小値をとるような行が $2$ つ存在し、そのうち $1$ つは元の $i_1$ を含んだ $c$ 内でも $j'$ で最小値を取るような行、もう一方は $i_1$ を除いた結果新たに $j'$ で最小値を取るようになった行です。 前者を $i^*$ とします。 任意の行 $i \\ne i^*$ で $c_{ik} \u0026gt; \\min_{j \\in c\\setminus\\lbrace j_1\\rbrace}c_{ij}$ となるような $c$ 外の列の集合 $$ K = \\left\\lbrace k \\notin c \\mid c_{ik} \u0026gt; \\min_{j \\in c\\setminus\\lbrace j_1\\rbrace}c_{ij}\\ \\forall i \\ne i^* \\right\\rbrace $$ を求め、そのうち $i^*$ 行で最大にする列 $$ j^* = \\arg\\max_{j \\in K} c_{i^*j} $$ を求め、$j^*$ を $j_1$ の代わりに入れて $c^{new} = \\lbrace j^*\\rbrace\\cup c \\setminus \\lbrace j_1 \\rbrace$ とすると、$c^{new}$ も $C$ の序数的基底になります。\nアルゴリズム 上記の基数的ピボットと序数的ピボットを繰り返すと、求めたい $x$ が求まります。\n $a = \\lbrace 1,2, \\dots, n \\rbrace$、$c = \\lbrace 2, \\dots, n\\rbrace \\cup \\arg\\max_{j \\ge n+1}\\lbrace C_{1j}\\rbrace$ と $A, C$ の基底を初期化する。 $a \\ne c$ である限り以下を繰り返す：  $c$ に含まれていて $a$ に含まれていない列 $j$ を、$A$ の基数的ピボットにより $a$ に入れるように $a$ を更新する。 $a$ から出された列 $j'$ について、$C$ の序数的ピボットにより $c$ から除いて $c$ を更新する。    実装 Nguyen and Vohra (2018)がadditional materialとして提供しているMATLABコードを参考に、このアルゴリズムをPythonで実装してみるとこんな感じになる（GitHub）。\nimport numpy as np def scarf_lemma(A, b, C): n = A.shape[0] a = np.arange(n) c = np.append(np.arange(1, n), n+np.argmax(C[0, n:])) j = np.setdiff1d(c, a, assume_unique=True)[0] step = 1 while True: print(f\u0026#34;Step {step}: a = {a+1}, c = {c+1}\u0026#34;) # index 0 スタートを 1 スタートに直して出力 A, a, b, j = cardinal_pivot(A, a, b, j) if (a == c).all(): break c, j = ordinal_pivot(C, c, j) if (a == c).all(): break step += 1 # index 0 スタートを 1 スタートに直してreturn return a+1, c+1 def cardinal_pivot(A, a, b, i): m, n = A.shape ratio = np.array([]) for row in range(m): if A[row, i] \u0026gt; 0.01: if ratio.size == 0: ratio = np.array([b[row] / A[row, i], row]) else: ratio = np.vstack([ratio, np.array([b[row] / A[row, i], row])]) if ratio.size == 0: raise ValueError(\u0026#34;i can not be a basis column.\u0026#34;) elif ratio.size == 2: pivot_row = ratio[1].astype(int) else: idx = np.argmin(ratio, axis=0)[0] pivot_row = ratio[idx, 1].astype(int) basis = A[:, a] basis_col = np.argmax(basis[pivot_row, :]) pivot = a[basis_col] a[a==pivot] = i a.sort() A_new = np.zeros(shape=(m,n)) b_new = np.zeros(shape=b.shape) A_new[pivot_row, :] = A[pivot_row, : ] / A[pivot_row, i] b_new[pivot_row] = b[pivot_row] / A[pivot_row, i] for k in range(m): if k != pivot_row: A_new[k, :] = A[k, :] - A[k, i] * A_new[pivot_row, :] b_new[k] = b[k] - A[k, i] * b_new[pivot_row] return [A_new, a, b_new, pivot] def ordinal_pivot(C, c, j): n = C.shape[1] c_bar = np.setdiff1d(np.arange(n), c, assume_unique=True) b = C[:, c_bar] basis = C[:, c] c_remains = np.setdiff1d(c, j, assume_unique=True) basis2 = C[:, c_remains] original_argmins = np.argmin(basis, axis=1) original_argmins = c[original_argmins] new_mins = np.min(basis2, axis=1) new_argmins = np.argmin(basis2, axis=1) new_argmins = c_remains[new_argmins] unique, counts = np.unique(new_argmins, return_counts=True) r = unique[counts \u0026gt;= 2] if r.size \u0026gt; 1: raise ValueError(\u0026#34;Two columns with two row minimizer.\u0026#34;) r = r[0] idx = np.where(original_argmins == r)[0][0] row_of_idx = b[idx, :] b = np.delete(b, idx, axis=0) new_mins = np.delete(new_mins, idx, axis=0) all_mins = np.tile(new_mins.reshape((new_mins.size, 1)), (1, b.shape[1])) cols = np.where((b \u0026gt; all_mins).all(axis=0))[0] new_col = cols[np.argmax(row_of_idx[cols])] new_c = c_bar[new_col] c[c==j] = new_c c.sort() return c, new_c 元論文にある例を使って\nA = np.array([ [1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1] ]) b = np.array([1 + 1e-6, 1 + 2e-6, 1 + 3e-6]) M = np.arange(100, 87, -1) C = np.array([ [0, M[2], M[3], 12, 3, 2, 9, 5, 4, M[10], M[11], M[12]], [M[1], 0, M[3], 6, 7, 9, M[7], M[8], M[9], 5, 2, 8], [M[1], M[2], 0, M[4], M[5], M[6], 3, 8, 10, 6, 9, 4] ]) scarf_lemma(A, b, C) を実行してみると、結果は以下の通り。\nStep 1: a = [1 2 3], c = [ 2 3 10] Step 2: a = [ 1 3 10], c = [ 3 10 12] Step 3: a = [ 1 3 12], c = [ 3 7 12] Step 4: a = [ 1 7 12], c = [ 7 8 12] Step 5: a = [ 1 8 12], c = [ 4 8 12] (array([ 4, 8, 12]), array([ 4, 8, 12])) 論文に書かれてる通り実行されている。\nまとめ Scarf (1967)のScarf\u0026rsquo;s lemmaを実装してみた。 みんなこれからどんどんコアを計算していこうな！ （もし記述・実装に間違いや変なとこあったら教えてください！！）\n","date":"2021-12-25T10:53:40+09:00","permalink":"https://miiitomi.github.io/p/scarf/","title":"Scarf's lemmaとその実装"},{"content":"はじめに タイトルの通りです。 このブログを開設するまでにやったことを備忘録としてまとめておきます。 わざわざ僕が新たに書き記すまでもなく似たような記事はたくさんあるのですが、1本目に書く内容としてちょうどいい感じのものな気がしたので。 分かってる人からしたらそりゃそうってことしか書いてないと思うけど、僕みたいな初心者が見たら1ミリくらい参考になるかもしれない（ならないかもしれない）。\nちなみにタイトルに「非エンジニアの初心者が」と書きましたが、すごく広い意味で捉えればエンジニアと言えなくもないかも。 でも自己認識としてはエンジニアを名乗れるほど技術力はない（し肩書きもリサーチャーな）ので嘘ではないでしょう。 Git/GitHubの使い方とかは一応わかってることを仮定します。\n使ったもの・環境  macBook Pro/macOS Big Sur v11.1 Homebrew v3.3.7 Hugo v0.89.4 Hugo Theme Stack Git/GitHub  Hugoのインストール・スタート とりあえずHomebrewを使って、ターミナルで brew install hugo でHugoをインストールします。 hubo version と打ってバージョン確認すると\n$ hugo version hugo v0.89.4+extended darwin/amd64 BuildDate=unknown と出るので入ったっぽい。\nブログ用のディレクトリを作るところで hugo new site sitename (sitenameのところは適当に) とすると、\n$ hugo new site sitename Congratulations! Your new Hugo site is created in ***/***/sitename. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2. Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3. Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation. と出てきて、sitenameディレクトリができ、色々入ってます。\nテーマ テーマを入れちゃいましょう。今回はStackにしました。 HugoのdocumentationのQuick Startではgit submoduleに追加してたり、他の方はテーマをfolkしてから使ってたりしてますが、手っ取り早くクローンしちゃいました（ちゃんとfolkした方が本当は良いかも）。\ncd sitename cd themes git clone git@github.com:... ...の部分は使うテーマに合わせて。\nStackは例を提供してくれてるので、それをベースに作っていきます。sitename/themes/hugo-theme-stack/exampleSite内のconfig.yamlとcontent/をsitename直下に移し(content/は置き換え)、config.tomlを削除します。\nそして hugo server -D と打つと、\n$ hugo server -D Start building sites … hugo v0.89.4+extended darwin/amd64 BuildDate=unknown WARN 2021/12/09 22:20:52 The \u0026quot;twitter_simple\u0026quot; shortcode will soon require two named parameters: user and id. See \u0026quot;***/***/sitename/content/post/rich-content/index.md:26:1\u0026quot; | EN -------------------+----- Pages | 49 Paginator pages | 3 Non-page files | 8 Static files | 0 Processed images | 29 Aliases | 23 Sitemaps | 1 Cleaned | 0 Built in 241 ms Watching for changes in ***/***/sitename/{archetypes,content,data,layouts,static,themes} Watching for config changes in ***/***/sitename/config.yaml, ***/***/sitename/themes/hugo-theme-stack/config.yaml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop と出てくるので、localhost:1313をブラウザで開いてみると、\n \nできた！！！（できてない）\nconfig あとは config.yaml を少し変えていきます。 書き換えた箇所は大体こんな感じだっけ？(忘れてるとこもあるかも)\n baseurl: https://\u0026lt;GithubAccount\u0026gt;.github.io languageCode: ja title: \u0026lt;Sitename\u0026gt; publishDir: docs を追加.  Hugoでビルドするとデフォルトではpublic/にビルドされるのですが、Github Pagesでホストするためにはdocs/にビルドしたいので。   favicon: /images/favicon.ico  ファビコンに使いたいicoファイル(favicon.ico)はstatic/images/に入れておく.   sidebar  emoji:  subtitle: ***：適当に. avatar:  local: false src: /images/avatar.png：アバター用の画像はstatic/images/内に。     article:  math: true：自分は今後数式を使った記事を書くことも多分あるので。 toc: false：目次を表示させたくなければ。 readingTime: false：各記事のreading timeを表示させたくなければ。 comments:  enabled: false：コメント設定面倒そうだったし、そもそもあまり必要ないと思ったので。   opengraph:  twitter:  card: summary ツイッターカードのスタイル。お好みで。     defaultImage:  opengraph:  enabled: true local: false src: images/avatar.png：OGP用のデフォルト画像、とりあえずアバターでいいか。     menu:  main:  params:  hewTab: false：homeボタン押したときに新規タブにしたくない。     social:  github, twitterは設定.        日本語フォント この辺りで漢字が中国語フォントになってることに気付く。これはthemes/hugo-theme-stack/assets/scss/variables.scss 内の、\n--zh-font-family: ...` --base-font-family: \u0026quot;Lato\u0026quot;, var(--sys-font-family), var(--zh-font-family), sans-serif; を\n--ja-font-family: \u0026quot;游ゴシック体\u0026quot;, \u0026quot;Yu Gothic\u0026quot;, YuGothic, \u0026quot;ヒラギノ角ゴ Pro\u0026quot;, \u0026quot;Hiragino Kaku Gothic Pro\u0026quot;, \u0026quot;メイリオ\u0026quot;, \u0026quot;Meiryo\u0026quot;;` --base-font-family: \u0026quot;Lato\u0026quot;, var(--sys-font-family), var(--ja-font-family), sans-serif; みたいな感じに変更したら日本語フォントになった、たしか（うろ覚え）。\nコンテンツ categories, post内のテストカテゴリー・ポストは消して、必要あれば例参考に作る。また page/about.md は最初から何らか必要だと思うので適当に書き換える。 Hugoでは hugo new post/XXX.md と打つと content/post/ に XXX.md ができるのだがそのデフォルトは archetypes/default.md になっている。これも必要に応じて書き換えとこう。自分の場合は\n--- title: {{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }} description: slug: {{ .Name }} date: {{ .Date }} categories: - tags: [] --- とこんな感じにとりあえずしといた。\nビルド ビルドはsitename直下で hugo でOK。docs/(config.yaml内でpublishDirを設定してなければpublic/)内にビルドされるはず。\nプッシュ・Github Pagesでホスト。 GitHubで自分のレポジトリとして \u0026lt;GitHubAccount\u0026gt;.github.io を作り、これまで作ってきたものをプッシュ。\nSettings/Pagesから, Sourceをmainブランチのdocs/とする。ホストされるまでちょっと待つと、   今度こそできた！\n記事の書き方 新規のブログ記事を書くときはとりあえず hugo new post/XXX.md したあと、hugo server -Dで確認しながら執筆し、書けたら hugo でビルド、GithubにプッシュすればOKという感じ。自動デプロイとかもやればできるんだろうけど大したことないしとりあえずいいや。そのうち気が向いたらやろう。\nまとめ 今日やったことじゃないので忘れてるとことかあるかもだけど、大体こんな感じ。\nこれからどんどん記事書いてこう！！\n","date":"2021-12-09T21:30:20+09:00","permalink":"https://miiitomi.github.io/p/hugo/","title":"非エンジニアの初心者がHugo(テーマStack)+GitHub Pagesでブログを開設するまで"}]